name: "Subtree action"
description: "Execute the git subtree action in a protected environment"

inputs:
  git_name:
    description: "Git User Name"
    required: false
    default: GitHub Actions
  git_email:
    description: "Git User Email"
    required: false
    default: actions@github.com
  repo:
    description: "Repository URL (only https path supported)"
    required: true
  ref:
    description: "branch name, commit sha"
    required: false
    default: "main"
  prefix:
    description: "Prefix"
    required: true
  github_pat:
    description: "GitHub Personal Access Token"
    required: true
  force:
    description: "Force push"
    required: false
    default: "false"

runs:
  using: "composite"

  steps:
    - name: Setup git for subtree
      shell: bash
      run: |
        # Fix dubious ownership
        git config --global --add safe.directory /github/workspace

        # Set git email and name
        git config --global user.email "${{ inputs.git_email }}"
        git config --global user.name "${{ inputs.git_name }}"

        # Make sure there are no prompts for git commands
        cp .git/config .git/config-original
        git config --global url."https://api:${{ inputs.github_pat }}@github.com/".insteadOf "https://github.com/"
        git config --unset http."https://github.com/".extraheader

    # - name: Fetch latest changes and reset local branch
    #   shell: bash
    #   run: |
    #     git fetch origin
    #     git reset --hard origin/main

    - name: Push subtree with force
      shell: bash
      run: |
        set -x

        # Split the subtree
        git subtree split --prefix="${{ inputs.prefix }}" -b split

        # Clone the target repository
        git clone "https://github.com/${{ inputs.repo }}.git" target-repo

        # Change to the cloned directory
        cd target-repo

        # Checkout to the target branch (or create it if it doesn't exist)
        git checkout -B "${{ inputs.ref }}"

        # Pull the latest changes from the remote target branch
        git pull origin "${{ inputs.ref }}" --rebase

        # Merge the split branch from the original repo with explicit strategy
        git pull ../. split --allow-unrelated-histories --no-rebase

        # Push the merged changes to the target repository
        git push origin "${{ inputs.ref }}"

        # Cleanup
        cd ..
        rm -rf target-repo