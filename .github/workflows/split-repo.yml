name: Split and Push Changes

on:
  push:
    branches:
      - main

jobs:
  split_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
            fetch-depth: 2 # Ensure we have enough history for the diff

      - name: Install Git Scalar
        run: |
          # Download the latest Git Scalar release
          curl -LO "https://github.com/microsoft/git-scalar/releases/download/v1.0.0/git-scalar-linux-x86_64-1.0.0.tar.gz"
          
          # Extract the tarball
          tar -xzf git-scalar-linux-x86_64-1.0.0.tar.gz

          # Move the binary to a directory in PATH
          sudo mv git-scalar /usr/local/bin/

          # Verify installation
          git scalar --version
          
      - name: Get modified modules
        id: get-modules
        run: |
          files="$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }})"
          folders_list="[]"

          for file in $files
          do  
            folder="$(echo $(dirname "${file}") | sed 's!/*\([^/]*\).*!\1!g')"
            folders_list="$(echo "$folders_list" | jq ". += [\"$folder\"]")"
          done

          unique_list="$(echo "$folders_list" | jq -c unique )"
          echo "::set-output name=modules::$unique_list"
      
      - name: Split and push changes
        env:
          GIT_SCALAR_VERSION: "1.0"  # Specify your Git Scalar version if needed
        run: |
          modified_modules="${{ steps.get-modules.outputs.modules }}"
          if [ -z "$modified_modules" ]; then
            echo "No modules to process."
            exit 0
          fi

          for module in $modified_modules; do
            echo "Processing module: $module"

            # Define the repository URL and directory for each module
            REPO_URL="https://github.com/christian-calabrese/terraform-aws-$module.git"
            MODULE_PATH="modules/$module"

            # Setup Git Scalar
            git scalar init --repository "$REPO_URL"

            # Create a new directory for the module
            mkdir -p "$module-repo"
            cd "$module-repo"

            # Clone the single-repo
            git clone "$REPO_URL" .

            # Add the changes from the module
            cp -r "../$MODULE_PATH/" .

            # Commit and push the changes
            git add .
            git commit -m "Update module $module"
            git push origin main

            # Clean up
            cd ..
            rm -rf "$module-repo"
          done